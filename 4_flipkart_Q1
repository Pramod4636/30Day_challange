# Dates :  Created :                    Rev : 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q : Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.
Example 1:

Input: nums = [4,3,2,3,5,2,1], k = 4
Output: true
Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
Example 2:

Input: nums = [1,2,3,4], k = 3
Output: false
 

Constraints:

1 <= k <= nums.length <= 16
1 <= nums[i] <= 104
The frequency of each element is in the range [1, 4].


Q link  : https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Intuition : 

  Recursive defination : 
   f(i , j , s[n] , T ) -> gives is possible to inserting elements in  ith ..........kth partition with sum T
                           where j decide  is possible to insert jth element in ith partition if yes then explore recursivsely 
    
   2 recusion : outer rec and innner recursion 
   outer rec : select ith partition 
   inner rec : ith partion inside elmentst insertion . 
   
   base case : 
   all k partion is fillde then anser is true 
   ith partion is filled then ansew  i+1 ...kth possible then true oterwise false
   
   insertion base case : possible insertion then only insert 
   
 Note :  initaly 1 elements last select and insert in one set . then recusrives call 
   
                           
    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Complexity
- Time complexity: O() 

- Space complexity: O() 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Code
```

class Solution {
public:
    
    bool fun(int i_sub , int i_ele , vector<int> &subsum , vector<int> &nums , long long &T , int  K, vector<int> &vis )
    {
        int n = nums.size();
        // ith subset is filleded completely 
        if( subsum[i_sub] == T) 
        {
            // check i+1 ... kth partition fullfill with sum = tot/k
            if( i_sub == K-1 ) // all k partition filled completey 
             return true ;

            // 0 to ith filling done  if i...k-1 true then ans is ture

            return fun(i_sub + 1 ,n-1,subsum , nums,T , K  ,vis);
        }

        for( int i = i_ele ; i >= 0 ; --i )
        {
            if(vis[i]) continue;
            // filling elments from 0....i_ele elements in i_sub th partition 
            int temp = subsum[i_sub] + nums[i];
            if(temp <= T )
            {
                vis[i] =1 ; 
                subsum[i_sub] += nums[i];

                int x = fun(i_sub,i-1,subsum,nums,T,K,vis);
                vis[i] = 0 ;
                subsum[i_sub] -= nums[i];

                if(x) return true;
            }
        }

        return false;

    }   
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> vis(n,0) , subsum(k,0) ;
        long long  T = 0 ;
        for(auto x : nums ) T += x;
        if( k == 1 ) return true;  // only one partion then sum is always equal . 
         
        if( T%k) return false; // it indicates each partion has sum fraction and fraction sum of partition is not possible ( partion contain only interger number ) 

        if( k > n ) return false; // max number partion with sum > 0  then 1 partition must contain atleast 1 element . so max partion are n . 

        T = T/k;
        
        subsum[0] = nums[n-1]; // initalization : if last element is in one of the partion that contain answer .
        vis[n-1] =1 ; 
        return fun(0,n-1,subsum,nums,T,k,vis);
    }
};

```
---------------------------------------------------------------------------------------------------------------------------------------------------
