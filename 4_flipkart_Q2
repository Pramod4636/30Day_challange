# Dates :  Created :                    Rev : 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q : In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.

You are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.

You are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.

Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.

 

Example 1:

Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]
Output: 14
Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
In special offer 1, you can pay $5 for 3A and 0B
In special offer 2, you can pay $10 for 1A and 2B. 
You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.
Examp

link https://leetcode.com/problems/shopping-offers/description/
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Intuion : 
    Here to minimize the cost we have try to buy  maximum number of items in special offer with min price
    Chose the min among the price may ( greedy choice ) may fails to filling with other itmes in future
    only one solution : try all possible combination ahe select minimum among them 
     try all possible combination of offers that fullfill exact need and chose  minimum one. 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Approach


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Complexity
- Time complexity: O(exponetial ) all possible combination of offers  each offer 0 times , 1 times ,2 times ,.... , times possible  

- Space complexity: O( N ) recusrive stack   

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Code
```
class Solution {
public:
    int cal_price(vector<int> &need , vector<int> &price) // cost for buying need items indivisualy 
    {
        int tot = 0 ;
        for( int i = 0 ; i < need.size() ; ++i )
        {
            tot += (price[i] * need[i]);
        }
        return tot;
    }

    bool possilbe(vector<int> &off , vector<int> &need) // offer is possible to take if after items included then it must less than or equal to needs . 
    {
        for(int i = 0 ; i < need.size() ; ++i )
        {
            if( off[i] > need[i])
            {
                return false;
            }
        }
        return true;
    }
    void modif(vector<int> &off , vector<int> &need) // take offer then need is reduced 
    {
            for(int i = 0 ; i < need.size() ; ++i )
            {
                need[i] -= off[i];
            }
    }
    void remov(vector<int> &off , vector<int> &need) // for return offer need will increase ( not included case sathi )
    {
        for(int i = 0 ; i < need.size(); ++i )
        {
            need[i] += off[i];
        }
    }


    int fun(int ind ,vector<int> &need ,vector<vector<int>> &special , vector<int> &price ) // gives 0....i combination of offer which is minimum cost with exact need.
    {

        if(ind == -1 ) // all offer done combination 
        {
           return  cal_price(need , price);
           
        }


        // ith offer possibleity : 0 times used , 1 times used or 2 times used or 3 times used 
        // explore all possiblity at index ind . 

        // taken offer if possible to take ( number of items in ith offer is less than equal to need )
        int take = INT_MAX;
        if(possilbe(special[ind] , need))
        {
            modif(special[ind] , need);
            take = special[ind][need.size()] + fun(ind,need,special , price ); // after taken it will again possible to take     
            remov(special[ind] , need);
        }

        int nottake = fun(ind-1,need,special,price);
    
        return min(take,nottake);
    }

    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        
        int n = special.size(); // combination of special offer we are doing . 
        return fun(n-1 , needs, special ,price);

    }
};



```
---------------------------------------------------------------------------------------------------------------------------------------------------

